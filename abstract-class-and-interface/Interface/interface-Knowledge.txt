Interface me ke sare variables by-default public, static, final hote hai and functions by-default Final and abstract hote hai, ab abstract ki kahani deke jaye interface me to, agar ek interface i1 or usko extend karke dusra interface i2 banaya and iss i2 ka ek class banaya usko implement kiya or us class ka name rkha c1 abb dekha jaye to hum i1 ke pass 3 member hai first one is int x=6; void f1(); static void f2(){syso(x);} and i2 ne i1 ko extend kiya or uske pass four member hai int x=9; int y=2; static void f2(){syso(x)}, void f3(); and abb ek class banai c1 usko implemnts kiya i2 se pass three member hai static void f2(){syso(x)} public void f1(){} public void f3(){} ab ek class hai jo ki main hai InterF p.s.v.m {i2.f2(); i2.f2(); c1 C1 = new c1(); c1.f2(); syso(C1.y); i1.f2();} abb dekha jaye to hum c1.f2 nahi chala skate hai direct kyu ki hum static functtion ko call nahi kar sakte




==========================
JAVA INTERFACE CONCEPTS
==========================

=> Interface Variable Rules:
----------------------------
- All variables in an interface are:
  => public static final (by default)
- They behave like constants.
- Example:
    interface I1 {
        int x = 6; // public static final int x = 6;
    }

=> Interface Method Rules:
---------------------------
- By default, methods are:
  => public abstract
- From Java 8 onwards, interfaces can also have:
  => static methods
  => default methods

- Example:
    interface I1 {
        void f1(); // public abstract void f1();
        static void f2() {
            System.out.println(x);
        }
    }
=> Variable Hiding in Interface:
-------------------------------
- If I2 extends I1 and declares the same variable 'x', it hides I1's x.
- Both are accessible using InterfaceName.x
  => I1.x = 6
  => I2.x = 9
=> Static Methods in Interface:
-------------------------------
- Static methods are NOT inherited.
- They must be called using the interface name directly.
- You CANNOT call them with an object reference.

=> Example (Invalid):
    C1 c1 = new C1();
    c1.f2(); // Error! Cannot call static method like this.

=> Correct Usage:
    I1.f2(); // OK
    I2.f2(); // OK
    C1.f2(); // OK, if C1 defines its own static f2()

=> Sample Structure:
--------------------

interface I1 {
    int x = 6;
    void f1();
    static void f2() {
        System.out.println(x); // prints 6
    }
}

interface I2 extends I1 {
    int x = 9;
    int y = 2;
    static void f2() {
        System.out.println(x); // prints 9
    }
    void f3();
}

class C1 implements I2 {
    public void f1() {
        // implementation
    }

    public void f3() {
        // implementation
    }

    static void f2() {
        System.out.println(x); // prints 9
    }
}

public class InterF {
    public static void main(String[] args) {
        I2.f2();          // prints 9
        I2.f2();          // prints 9
        C1 c1 = new C1();
        c1.f2();          // => Compile-time error: static method not inherited
        System.out.println(c1.y); // prints 2
        I1.f2();          // prints 6
    }
}

=> Summary Table:
-----------------

| Concept                          | Java Behavior                                   |
|----------------------------------|-----------------------------------------------  |
| Interface variables              | public static final (always)                    |
| Interface methods (non-static)   | public abstract (by default)                    |
| Static methods in interface      | Not inherited, call via InterfaceName.method    |
| Variable hiding in interfaces    | Resolved using InterfaceName.var                |
| Calling static method            | Always via interface/class, NOT object          |

